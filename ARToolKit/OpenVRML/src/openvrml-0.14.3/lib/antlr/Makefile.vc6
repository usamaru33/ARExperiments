#
# OpenVRML
#
# Copyright (C) 2001-2002  S. K. bose
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
.SILENT:
# Makefile for libantlr
# Microsoft Visual C++6.0 or later

#!include <c:\Program Files\Microsoft Visual Studio\vc98\include\win32.mak>

ANTLRBINOUTDIR = .\bin
INTDIR = $(ANTLRBINOUTDIR)
ANTLRLIBDFIR = .\lib
ANTLRSOURCE = .\

help:
	more < <<
usage: nmake[.exe] /f Makefile.vc6 [target]
where: [target] may be any one of the following ...
    (default)... shows this text
    antlr ........  builds ANTLR library 
    clean....... deletes all intermediate files


    This makefile suite built against MS Visual C++ 6.0 and tested on
    WindowsNT 4.0, Windows95, and Windows98.

    ---- output directories as configured -------

    Linking Libs . : $(ANTLRLIBDFIR)
    Object Files . : $(ANTLRBINOUTDIR)

<<



PROMPT :
      -@echo Making ANTLR library

$(ANTLRBINOUTDIR) : 
	   if not exist $(ANTLRBINOUTDIR) mkdir $(ANTLRBINOUTDIR)

$(ANTLRLIBDFIR) : 
	   if not exist $(ANTLRLIBDFIR) mkdir $(ANTLRLIBDFIR)

CPP = cl.exe
CFLAGS = /nologo /MD /W0 /GX /O2 /D "WIN32" /D "_WINDOWS"\
	/Fp"$(INTDIR)\libantlr.pch" /YX /Fo"$(INTDIR)\\"\
	/Fd"$(INTDIR)\\" /FD /c

O=.obj
LIB32 = link.exe -lib


# variables

OBJ = $(ANTLRBINOUTDIR)\ANTLRException$(O) $(ANTLRBINOUTDIR)\ASTFactory$(O)\
      $(ANTLRBINOUTDIR)\ASTRefCount$(O) $(ANTLRBINOUTDIR)\BaseAST$(O)\
      $(ANTLRBINOUTDIR)\BitSet$(O) $(ANTLRBINOUTDIR)\CharBuffer$(O) \
	$(ANTLRBINOUTDIR)\CharScanner$(O) $(ANTLRBINOUTDIR)\CommonAST$(O) \
      $(ANTLRBINOUTDIR)\CommonASTWithHiddenTokens$(O) $(ANTLRBINOUTDIR)\CommonHiddenStreamToken$(O)\
      $(ANTLRBINOUTDIR)\CommonToken$(O) $(ANTLRBINOUTDIR)\InputBuffer$(O)\
      $(ANTLRBINOUTDIR)\LexerSharedInputState$(O) $(ANTLRBINOUTDIR)\LLkParser$(O)\
      $(ANTLRBINOUTDIR)\MismatchedCharException$(O) $(ANTLRBINOUTDIR)\MismatchedTokenException$(O) \
      $(ANTLRBINOUTDIR)\NoViableAltException$(O) \
      $(ANTLRBINOUTDIR)\NoViableAltForCharException$(O) $(ANTLRBINOUTDIR)\Parser$(O)\
      $(ANTLRBINOUTDIR)\ParserSharedInputState$(O) $(ANTLRBINOUTDIR)\RecognitionException$(O)\
      $(ANTLRBINOUTDIR)\String$(O) $(ANTLRBINOUTDIR)\Token$(O) $(ANTLRBINOUTDIR)\TokenBuffer$(O)\
      $(ANTLRBINOUTDIR)\TokenStreamBasicFilter$(O) $(ANTLRBINOUTDIR)\TokenStreamHiddenTokenFilter$(O)\
      $(ANTLRBINOUTDIR)\TokenStreamSelector$(O)\
      $(ANTLRBINOUTDIR)\TreeParser$(O) $(ANTLRBINOUTDIR)\TreeParserSharedInputState$(O) 



 


clean :
    -@echo Cleaning Libantlr library
     if exist $(ANTLRLIBDFIR) del /Q $(ANTLRLIBDFIR) 
     if exist $(ANTLRLIBDFIR) rmdir $(ANTLRLIBDFIR)
     if exist $(ANTLRBINOUTDIR) del /Q $(ANTLRBINOUTDIR) 
     if exist $(ANTLRBINOUTDIR) rmdir $(ANTLRBINOUTDIR) 
     cd $(MAKEDIR)
all: antlr
libraries : antlr

antlr : PROMPT $(ANTLRBINOUTDIR) $(ANTLRLIBDFIR) $(ANTLRLIBDFIR)\libantlr.lib


$(ANTLRLIBDFIR)\libantlr.lib : $(OBJ)
		       if exist $(ANTLRLIBDFIR)\libantlr.lib del $(ANTLRLIBDFIR)\libantlr.lib
		       $(LIB32) /nologo /out:$(ANTLRLIBDFIR)\libantlr.lib $(OBJ)

$(ANTLRBINOUTDIR)\ANTLRException.obj :  $(ANTLRSOURCE)\ANTLRException.cpp\
					          $(ANTLRSOURCE)\ANTLRException.hpp
            		                $(CPP) $(CFLAGS) $(ANTLRSOURCE)\ANTLRException.cpp

$(ANTLRBINOUTDIR)\ASTFactory.obj :  $(ANTLRSOURCE)\ASTFactory.cpp\
						$(ANTLRSOURCE)\ASTFactory.hpp
  						$(CPP) $(CFLAGS) /GR $(ANTLRSOURCE)\ASTFactory.cpp

$(ANTLRBINOUTDIR)\ASTRefCount.obj :  $(ANTLRSOURCE)\ASTRefCount.cpp\
						$(ANTLRSOURCE)\ASTRefCount.hpp
  						$(CPP) $(CFLAGS) /GR $(ANTLRSOURCE)\ASTRefCount.cpp

$(ANTLRBINOUTDIR)\BaseAST.obj :  $(ANTLRSOURCE)\BaseAST.cpp\
						$(ANTLRSOURCE)\BaseAST.hpp
  						$(CPP) $(CFLAGS) /GR $(ANTLRSOURCE)\BaseAST.cpp

$(ANTLRBINOUTDIR)\BitSet.obj :  $(ANTLRSOURCE)\BitSet.cpp\
						$(ANTLRSOURCE)\BitSet.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\BitSet.cpp

$(ANTLRBINOUTDIR)\CharBuffer.obj :  $(ANTLRSOURCE)\CharBuffer.cpp\
						$(ANTLRSOURCE)\CharBuffer.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\CharBuffer.cpp

$(ANTLRBINOUTDIR)\CharScanner.obj :  $(ANTLRSOURCE)\CharScanner.cpp\
						$(ANTLRSOURCE)\CharScanner.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\CharScanner.cpp

$(ANTLRBINOUTDIR)\CommonAST.obj :  $(ANTLRSOURCE)\CommonAST.cpp\
						$(ANTLRSOURCE)\CommonAST.hpp
  						$(CPP) $(CFLAGS) /GR $(ANTLRSOURCE)\CommonAST.cpp

$(ANTLRBINOUTDIR)\CommonASTWithHiddenTokens.obj :  $(ANTLRSOURCE)\CommonASTWithHiddenTokens.cpp\
						$(ANTLRSOURCE)\CommonASTWithHiddenTokens.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\CommonASTWithHiddenTokens.cpp

$(ANTLRBINOUTDIR)\CommonHiddenStreamToken.obj :  $(ANTLRSOURCE)\CommonHiddenStreamToken.cpp\
						$(ANTLRSOURCE)\CommonHiddenStreamToken.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\CommonHiddenStreamToken.cpp

$(ANTLRBINOUTDIR)\CommonToken.obj :  $(ANTLRSOURCE)\CommonToken.cpp\
						$(ANTLRSOURCE)\CommonToken.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\CommonToken.cpp

$(ANTLRBINOUTDIR)\InputBuffer.obj :  $(ANTLRSOURCE)\InputBuffer.cpp\
						$(ANTLRSOURCE)\InputBuffer.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\InputBuffer.cpp

$(ANTLRBINOUTDIR)\LexerSharedInputState.obj :  $(ANTLRSOURCE)\LexerSharedInputState.cpp\
						$(ANTLRSOURCE)\LexerSharedInputState.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\LexerSharedInputState.cpp

$(ANTLRBINOUTDIR)\LLkParser.obj :  $(ANTLRSOURCE)\LLkParser.cpp\
						$(ANTLRSOURCE)\LLkParser.hpp
  						$(CPP) $(CFLAGS) /GR $(ANTLRSOURCE)\LLkParser.cpp

$(ANTLRBINOUTDIR)\MismatchedCharException.obj :  $(ANTLRSOURCE)\MismatchedCharException.cpp\
						$(ANTLRSOURCE)\MismatchedCharException.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\MismatchedCharException.cpp

$(ANTLRBINOUTDIR)\MismatchedTokenException.obj :  $(ANTLRSOURCE)\MismatchedTokenException.cpp\
						$(ANTLRSOURCE)\MismatchedTokenException.hpp
  						$(CPP) $(CFLAGS) /GR $(ANTLRSOURCE)\MismatchedTokenException.cpp

$(ANTLRBINOUTDIR)\NoViableAltException.obj :  $(ANTLRSOURCE)\NoViableAltException.cpp\
						$(ANTLRSOURCE)\NoViableAltException.hpp
  						$(CPP) $(CFLAGS) /GR $(ANTLRSOURCE)\NoViableAltException.cpp

$(ANTLRBINOUTDIR)\NoViableAltForCharException.obj :  $(ANTLRSOURCE)\NoViableAltForCharException.cpp\
						$(ANTLRSOURCE)\NoViableAltForCharException.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\NoViableAltForCharException.cpp

$(ANTLRBINOUTDIR)\Parser.obj :  $(ANTLRSOURCE)\Parser.cpp\
						$(ANTLRSOURCE)\Parser.hpp
  						$(CPP) $(CFLAGS) /GR $(ANTLRSOURCE)\Parser.cpp

$(ANTLRBINOUTDIR)\ParserSharedInputState.obj :  $(ANTLRSOURCE)\ParserSharedInputState.cpp\
						$(ANTLRSOURCE)\ParserSharedInputState.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\ParserSharedInputState.cpp

$(ANTLRBINOUTDIR)\RecognitionException.obj :  $(ANTLRSOURCE)\RecognitionException.cpp\
						$(ANTLRSOURCE)\RecognitionException.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\RecognitionException.cpp

$(ANTLRBINOUTDIR)\String.obj :  $(ANTLRSOURCE)\String.cpp\
						$(ANTLRSOURCE)\String.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\String.cpp

$(ANTLRBINOUTDIR)\Token.obj:  $(ANTLRSOURCE)\Token.cpp\
						$(ANTLRSOURCE)\Token.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\Token.cpp

$(ANTLRBINOUTDIR)\TokenBuffer.obj:  $(ANTLRSOURCE)\TokenBuffer.cpp\
						$(ANTLRSOURCE)\TokenBuffer.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\TokenBuffer.cpp

$(ANTLRBINOUTDIR)\TokenStreamBasicFilter.obj:  $(ANTLRSOURCE)\TokenStreamBasicFilter.cpp\
						$(ANTLRSOURCE)\TokenStreamBasicFilter.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\TokenStreamBasicFilter.cpp

$(ANTLRBINOUTDIR)\TokenStreamHiddenTokenFilter.obj:  $(ANTLRSOURCE)\TokenStreamHiddenTokenFilter.cpp\
						$(ANTLRSOURCE)\TokenStreamHiddenTokenFilter.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\TokenStreamHiddenTokenFilter.cpp

$(ANTLRBINOUTDIR)\TokenStreamSelector.obj:  $(ANTLRSOURCE)\TokenStreamSelector.cpp\
						$(ANTLRSOURCE)\TokenStreamSelector.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\TokenStreamSelector.cpp

$(ANTLRBINOUTDIR)\TreeParser.obj:  $(ANTLRSOURCE)\TreeParser.cpp\
						$(ANTLRSOURCE)\TreeParser.hpp
  						$(CPP) $(CFLAGS) /GR $(ANTLRSOURCE)\TreeParser.cpp

$(ANTLRBINOUTDIR)\TreeParserSharedInputState.obj:  $(ANTLRSOURCE)\TreeParserSharedInputState.cpp\
						$(ANTLRSOURCE)\TreeParserSharedInputState.hpp
  						$(CPP) $(CFLAGS) $(ANTLRSOURCE)\TreeParserSharedInputState.cpp




